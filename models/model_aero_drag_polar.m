%
%   Copyright 2020 Janis Maczijewski
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.
%

function r = model_aero_drag_polar(...
    air_density_msl, ...
    position, ...
    tether_direction, ...
    scale_height, ...
    inertial_velocity, ...
    wind_profile_exponent, ...
    wind_ref_height, ...
    wind_ref_speed, ...
    wind_disturbance, ...
    reference_area, ...
    angle_of_attack, ...
    roll_angle, ...
    CL0, ...
    CLalpha, ...
    CD0, ...
    CDalpha, ...
    CDalpha2 ...
)


    atm = model_atmosphere(...
        air_density_msl, ...
        -position(3), ...
        scale_height, ...
        inertial_velocity, ...
        wind_profile_exponent, ...
        wind_ref_height, ...
        wind_ref_speed, ...
        wind_disturbance ...
    );


    r = struct(...
        'air_density',                 nan(1, 1), ...
        'wind_speed',                  nan(1, 1), ...
        'wind_velocity',               nan(3, 1), ...
        'aero_velocity',               nan(3, 1), ...
        'aero_speed_squared',          nan(1, 1), ...
        'aero_speed',                  nan(1, 1), ...
        'dynamic_pressure',            nan(1, 1), ...
        'aero_direction_forward',      nan(3, 1), ...
        'aero_direction_up',           nan(3, 1), ...
        'aero_direction_lift',         nan(3, 1), ...
        'angle_of_attack_disturbed',   nan(1, 1), ...
        'CL',                          nan(1, 1), ...
        'CD',                          nan(1, 1), ...
        'drag_force',                  nan(1, 1), ...
        'lift_force',                  nan(1, 1), ...
        'aero_force_vector',           nan(3, 1), ...
        'orientation_matrix_flat',     nan(9, 1) ...
    );

    r.air_density          = atm.air_density;
    r.wind_speed           = atm.wind_speed;
    r.wind_velocity        = atm.wind_velocity;
    r.aero_velocity        = atm.aero_velocity;
    r.aero_speed_squared   = atm.aero_speed_squared;
    r.aero_speed           = atm.aero_speed;
    r.dynamic_pressure     = atm.dynamic_pressure;

    
    r.aero_direction_forward = r.aero_velocity / r.aero_speed;
    
    % Gram-Schmidt process to project up-vector into lift-plane
    r.aero_direction_up = tether_direction - ((tether_direction.'*r.aero_direction_forward)*r.aero_direction_forward);
    r.aero_direction_up = r.aero_direction_up / sqrt(sum(r.aero_direction_up.^2) + 1e-4);
    
    % Rotate up direction by the roll angle around the forward direction
    R = rotation_matrix_angle_axis(roll_angle, r.aero_direction_forward);
    r.aero_direction_lift = R * r.aero_direction_up;
    
    w_disturbance = wind_disturbance' * r.aero_direction_lift;
    r.angle_of_attack_disturbed = angle_of_attack + w_disturbance / r.aero_speed;
    
    r.CL = CL0 + CLalpha * r.angle_of_attack_disturbed;
    r.CD = CD0 + CDalpha * r.angle_of_attack_disturbed + CDalpha2 * r.angle_of_attack_disturbed^2;
    
    r.drag_force = r.dynamic_pressure * reference_area * r.CD;
    r.lift_force = r.dynamic_pressure * reference_area * r.CL;
    
    r.aero_force_vector = ...
         r.lift_force * r.aero_direction_lift ...
        -r.drag_force * r.aero_direction_forward;
    

    % Aircraft orientation matrix
    orientation_matrix = ...
        [r.aero_direction_forward cross(-r.aero_direction_lift,r.aero_direction_forward) -r.aero_direction_lift] ...
       *[cos(r.angle_of_attack_disturbed) 0 sin(r.angle_of_attack_disturbed);0 1 0;-sin(r.angle_of_attack_disturbed) 0 cos(r.angle_of_attack_disturbed)];
    r.orientation_matrix_flat = reshape(orientation_matrix, 9, 1);
    
end


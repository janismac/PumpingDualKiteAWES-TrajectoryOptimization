%
%   Copyright 2020 Janis Maczijewski
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.
%

function out = model_aero_forces(in)

    position0              = in.position0;
    position               = in.position;
    position0_dot          = in.position0_dot;
    position_dot           = in.position_dot;
    direction0             = in.direction0;
    direction              = in.direction;
    length0                = in.length0;
    angle_of_attack        = in.angle_of_attack;
    roll_angle             = in.roll_angle;
    secondary_length       = in.secondary_length;
    wind_ref_speed         = in.wind_ref_speed;
    wind_ref_height        = in.wind_ref_height;
    wind_profile_exponent  = in.wind_profile_exponent;
    wind_disturbance0      = in.wind_disturbance0;
    wind_disturbance       = in.wind_disturbance;
    air_density_msl        = in.air_density_msl;
    scale_height           = in.scale_height;
    tether_drag_diameter   = in.tether_drag_diameter;
    reference_area         = in.reference_area;
    CL0                    = in.CL0;
    CLalpha                = in.CLalpha;
    CD0                    = in.CD0;
    CDalpha                = in.CDalpha;
    CDalpha2               = in.CDalpha2;
    
    
    tether_drag = model_tether_drag(...
        position0, ...
        position, ...
        position0_dot, ...
        position_dot, ...
        direction0, ...
        direction, ...
        length0, ...
        secondary_length, ...
        tether_drag_diameter, ...
        air_density_msl, ...
        scale_height, ...
        wind_profile_exponent, ...
        wind_ref_height, ...
        wind_ref_speed, ...
        wind_disturbance0, ...
        wind_disturbance ...
    );

    % This is an ugly trick to generate the right output shape and type
    % without explicitly stating it. It seems to be necessary to allow
    % compatibility with both Matlab Codegen and CasADi.SX from the same code.
    myzero = 0*position0(1);
    
    out = struct(...
        'lumped_drag_forces_0',        repmat(myzero, 3, 1), ...
        'lumped_drag_forces',          repmat(myzero, 3, n_aircraft), ...
        'air_density',                 repmat(myzero, 1, n_aircraft), ...
        'wind_speed',                  repmat(myzero, 1, n_aircraft), ...
        'wind_velocity',               repmat(myzero, 3, n_aircraft), ...
        'aero_velocity',               repmat(myzero, 3, n_aircraft), ...
        'aero_speed_squared',          repmat(myzero, 1, n_aircraft), ...
        'aero_speed',                  repmat(myzero, 1, n_aircraft), ...
        'dynamic_pressure',            repmat(myzero, 1, n_aircraft), ...
        'aero_direction_forward',      repmat(myzero, 3, n_aircraft), ...
        'aero_direction_up',           repmat(myzero, 3, n_aircraft), ...
        'aero_direction_lift',         repmat(myzero, 3, n_aircraft), ...
        'angle_of_attack_disturbed',   repmat(myzero, 1, n_aircraft), ...
        'CL',                          repmat(myzero, 1, n_aircraft), ...
        'CD',                          repmat(myzero, 1, n_aircraft), ...
        'drag_force',                  repmat(myzero, 1, n_aircraft), ...
        'lift_force',                  repmat(myzero, 1, n_aircraft), ...
        'aero_force_vector',           repmat(myzero, 3, n_aircraft), ...
        'orientation_matrix_flat',     repmat(myzero, 9, n_aircraft), ...
        'applied_force0',              repmat(myzero, 3, 1), ...
        'applied_force',               repmat(myzero, 3, n_aircraft) ...
    );
    
    for i = 1:n_aircraft
        aero_i = model_aero_drag_polar(...
            air_density_msl, ...
            position(:,i), ...
            direction(:,i), ...
            scale_height, ...
            position_dot(:,i), ...
            wind_profile_exponent, ...
            wind_ref_height, ...
            wind_ref_speed, ...
            wind_disturbance(:,i), ...
            reference_area, ...
            angle_of_attack(i), ...
            roll_angle(i), ...
            CL0, ...
            CLalpha, ...
            CD0, ...
            CDalpha, ...
            CDalpha2 ...
        );
    
        out.air_density(:,i)             = aero_i.air_density;
        out.wind_speed(:,i)              = aero_i.wind_speed;
        out.wind_velocity(:,i)           = aero_i.wind_velocity;
        out.aero_velocity(:,i)           = aero_i.aero_velocity;
        out.aero_speed_squared(:,i)      = aero_i.aero_speed_squared;
        out.aero_speed(:,i)              = aero_i.aero_speed;
        out.dynamic_pressure(:,i)        = aero_i.dynamic_pressure;
        out.aero_direction_forward(:,i)  = aero_i.aero_direction_forward;
        out.aero_direction_up(:,i)       = aero_i.aero_direction_up;
        out.aero_direction_lift(:,i)     = aero_i.aero_direction_lift;
        out.angle_of_attack_disturbed(:,i)=aero_i.angle_of_attack_disturbed;
        out.CL(:,i)                      = aero_i.CL;
        out.CD(:,i)                      = aero_i.CD;
        out.drag_force(:,i)              = aero_i.drag_force;
        out.lift_force(:,i)              = aero_i.lift_force;
        out.aero_force_vector(:,i)       = aero_i.aero_force_vector;
        out.orientation_matrix_flat(:,i) = aero_i.orientation_matrix_flat;
    
    end
    
    

    out.lumped_drag_forces_0 = tether_drag.lumped_drag_forces_0;
    out.lumped_drag_forces   = tether_drag.lumped_drag_forces;
    
    out.applied_force0 = out.lumped_drag_forces_0;
    out.applied_force = out.lumped_drag_forces + out.aero_force_vector;

end

